swagger: '2.0'
info:
  description: This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
  version: 1.0.1
  title: OpenAPI Virtualan Petstore
  contact: {}
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: live.virtualandemo.com
basePath: /api
tags:
  - name: persons-api-controller
    description: the persons API
  - name: pets-api-controller
    description: the pets API
  - name: riskfactor-api-controller
    description: the riskfactor API
  - name: store-api-controller
    description: the store API
  - name: user-api-controller
    description: the user API
paths:
  /persons:
    get:
      tags:
        - persons-api-controller
      summary: Gets some persons
      description: Returns a list containing all persons. The list supports paging.
      operationId: personsGet
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: Page number
          required: false
          type: integer
          format: int32
          allowEmptyValue: false
        - name: pageSize
          in: query
          description: Number of persons returned
          required: false
          type: integer
          format: int32
          allowEmptyValue: false
      responses:
        '200':
          description: A list of Person
          schema:
            $ref: '#/definitions/Persons'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
    post:
      tags:
        - persons-api-controller
      summary: Creates a person
      description: Adds a new person to the persons list.
      operationId: personsPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: person
          description: The person to create.
          required: false
          schema:
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '204':
          description: Person succesfully created.
        '400':
          description: Person couldn't have been created.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /persons/{username}:
    get:
      tags:
        - persons-api-controller
      summary: Gets a person
      description: Returns a single person for its username.
      operationId: personsUsernameGet
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The person's username
          required: true
          type: string
      responses:
        '200':
          description: A Person
          schema:
            $ref: '#/definitions/Person'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Person does not exist.
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
    delete:
      tags:
        - persons-api-controller
      summary: Deletes a person
      description: Delete a single person identified via its username
      operationId: personsUsernameDelete
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The person's username
          required: true
          type: string
      responses:
        '200':
          description: OK
        '204':
          description: Person successfully deleted.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Person does not exist.
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /persons/{username}/collectingItems:
    get:
      tags:
        - persons-api-controller
      summary: Gets a person's collecting items list
      description: Returns a list containing all items this person is looking for. The list supports paging.
      operationId: personsUsernameCollectingItemsGet
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: Page number
          required: false
          type: integer
          format: int32
          allowEmptyValue: false
        - name: pageSize
          in: query
          description: Number of persons returned
          required: false
          type: integer
          format: int32
          allowEmptyValue: false
        - name: username
          in: path
          description: The person's username
          required: true
          type: string
      responses:
        '200':
          description: A collected items list
          schema:
            $ref: '#/definitions/PagedCollectingItems'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Person does not exist.
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /persons/{username}/friends:
    get:
      tags:
        - persons-api-controller
      summary: Gets a person's friends
      description: Returns a list containing all persons. The list supports paging.
      operationId: personsUsernameFriendsGet
      produces:
        - application/json
      parameters:
        - name: pageNumber
          in: query
          description: Page number
          required: false
          type: integer
          format: int32
          allowEmptyValue: false
        - name: pageSize
          in: query
          description: Number of persons returned
          required: false
          type: integer
          format: int32
          allowEmptyValue: false
        - name: username
          in: path
          description: The person's username
          required: true
          type: string
      responses:
        '200':
          description: A person's friends list
          schema:
            $ref: '#/definitions/PagedPersons'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Person does not exist.
        '500':
          description: An unexpected error occured.
          schema:
            $ref: '#/definitions/Error'
      deprecated: false
  /pets:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      operationId: addPet
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: false
  /pets/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
          allowEmptyValue: false
          enum:
            - available
            - pending
            - sold
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: false
  /pets/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
          allowEmptyValue: false
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid tag value
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: false
  /pets/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
        - application/json
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Pet not found
      security:
        - api_key: []
      deprecated: false
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '201':
          description: Created
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: false
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      produces:
        - '*/*'
      parameters:
        - name: api_key
          in: header
          description: api_key
          required: false
          type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '400':
          description: Invalid pet value
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: false
    patch:
      tags:
        - pet
      summary: patch an existing pet
      operationId: patchPet
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '204':
          description: No Content
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      deprecated: false
  /riskfactor/compute:
    post:
      tags:
        - riskfactor
      summary: riskfactor
      operationId: riskfactor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: riskFactorRequestDto
          description: riskfactor
          required: true
          schema:
            $ref: '#/definitions/RiskFactorRequestDto'
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/RiskFactorResponseDto'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - api_key: []
      deprecated: false
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '201':
          description: Created
        '400':
          description: Invalid Order
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
      deprecated: false
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      produces:
        - '*/*'
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
      deprecated: false
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
          allowEmptyValue: false
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: successful operation
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
        - '*/*'
      responses:
        '200':
          description: successful operation
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      deprecated: false
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '400':
          description: Invalid user supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - '*/*'
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '400':
          description: Invalid username supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
      deprecated: false
definitions:
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    title: Category
    description: A category for a pet
  CollectingItem:
    type: object
    required:
      - itemType
    properties:
      imageId:
        type: string
      itemType:
        type: string
        enum:
          - Vinyl
          - VHS
      maxPrice:
        type: number
        format: double
    title: CollectingItem
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - DBERR
          - NTERR
          - UNERR
      message:
        type: string
    title: Error
  Order:
    type: object
    properties:
      complete:
        type: boolean
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
    title: Order
    description: An order for a pets from the pet store
  PagedCollectingItems:
    type: object
    properties:
      currentPage:
        type: integer
        format: int32
      items:
        type: array
        items:
          $ref: '#/definitions/CollectingItem'
      pageSize:
        type: integer
        format: int32
      totalItems:
        type: integer
        format: int32
      totalPages:
        type: integer
        format: int32
    title: PagedCollectingItems
  PagedPersons:
    type: object
    properties:
      currentPage:
        type: integer
        format: int32
      items:
        type: array
        items:
          $ref: '#/definitions/Person'
      pageSize:
        type: integer
        format: int32
      totalItems:
        type: integer
        format: int32
      totalPages:
        type: integer
        format: int32
    title: PagedPersons
  Person:
    type: object
    required:
      - username
    properties:
      dateOfBirth:
        type: string
        format: date
      firstName:
        type: string
      lastName:
        type: string
      lastTimeOnline:
        type: string
        format: date-time
        readOnly: true
      spokenLanguages:
        type: object
        additionalProperties:
          type: string
      username:
        type: string
    title: Person
  Persons:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Person'
    title: Persons
  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      category:
        $ref: '#/definitions/Category'
      id:
        type: integer
        format: int64
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        items:
          type: string
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      type:
        type: string
        example: DOGS
    title: Pet
    description: A pet for sale in the pet store
  RiskFactorRequestDto:
    type: object
    properties:
      birthday:
        type: string
        format: date
      postalCode:
        type: string
    title: RiskFactorRequestDto
  RiskFactorResponseDto:
    type: object
    properties:
      riskFactor:
        type: integer
        format: int64
    title: RiskFactorResponseDto
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    title: Tag
    description: A tag for a pet
  User:
    type: object
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
        format: int64
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
      username:
        type: string
    title: User
    description: A User who is purchasing from the pet store
  VHS:
    title: VHS
    allOf:
      - $ref: '#/definitions/CollectingItem'
      - type: object
        required:
          - itemType
          - movieTitle
        properties:
          director:
            type: string
          imageId:
            type: string
          itemType:
            type: string
            enum:
              - Vinyl
              - VHS
          maxPrice:
            type: number
            format: double
          movieTitle:
            type: string
        title: VHS
  Vinyl:
    title: Vinyl
    allOf:
      - $ref: '#/definitions/CollectingItem'
      - type: object
        required:
          - albumName
          - artist
          - itemType
        properties:
          albumName:
            type: string
          artist:
            type: string
          imageId:
            type: string
          itemType:
            type: string
            enum:
              - Vinyl
              - VHS
          maxPrice:
            type: number
            format: double
        title: Vinyl
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
