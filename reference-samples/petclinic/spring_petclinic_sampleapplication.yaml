openapi: 3.0.1
info:
  title: OpenAPI definition
  description: From sample application https://github.com/spring-projects/spring-petclinic.git with corrections from http://inss.ch
  version: v0.1
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /owners/{ownerId}/pets/{petId}/visits/new:
    post:
      tags:
        - visit-controller
      operationId: processNewVisitForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visit'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners/{ownerId}/pets/{petId}/edit:
    get:
      tags:
        - pet-controller
      operationId: initUpdateForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - pet-controller
      operationId: processUpdateForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: owner
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Owner'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners/{ownerId}/pets/new:
    get:
      tags:
        - pet-controller
      operationId: initCreationForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: owner
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - pet-controller
      operationId: processCreationForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: owner
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Owner'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners/{ownerId}/edit:
    get:
      tags:
        - owner-controller
      operationId: initUpdateOwnerForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - owner-controller
      operationId: processUpdateOwnerForm
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners/new:
    get:
      tags:
        - owner-controller
      operationId: initCreationForm_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - owner-controller
      operationId: processCreationForm_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /vets:
    get:
      tags:
        - vet-controller
      operationId: showResourcesVetList
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vets'
  /vets.html:
    get:
      tags:
        - vet-controller
      operationId: showVetList
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners:
    get:
      tags:
        - owner-controller
      operationId: processFindForm
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: owner
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners/{ownerId}:
    get:
      tags:
        - owner-controller
      operationId: showOwner
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelAndView'
  /owners/find:
    get:
      tags:
        - owner-controller
      operationId: initFindForm
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /owners/*/pets/{petId}/visits/new:
    get:
      tags:
        - visit-controller
      operationId: initNewVisitForm
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    Visit:
      required:
        - description
      type: object
      properties:
        id:
          type: integer
          format: int32
        date:
          type: string
          format: date
        description:
          type: string
        petId:
          type: integer
          format: int32
        new:
          type: boolean
    Owner:
      required:
        - address
        - city
        - firstName
        - lastName
        - telephone
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        city:
          type: string
        telephone:
          type: string
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        petsInternal:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Pet'
        new:
          type: boolean
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        birthDate:
          type: string
          format: date
        type:
          $ref: '#/components/schemas/PetType'
        owner:
          $ref: '#/components/schemas/Owner'
        visits:
          type: array
          items:
            $ref: '#/components/schemas/Visit'
        visitsInternal:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Visit'
        new:
          type: boolean
    PetType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        new:
          type: boolean
    Specialty:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        new:
          type: boolean
    Vet:
      required:
        - firstName
        - lastName
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        specialties:
          type: array
          items:
            $ref: '#/components/schemas/Specialty'
        specialtiesInternal:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/Specialty'
        nrOfSpecialties:
          type: integer
          format: int32
        new:
          type: boolean
    Vets:
      type: object
      properties:
        vetList:
          type: array
          items:
            $ref: '#/components/schemas/Vet'
    ModelAndView:
      type: object
      properties:
        view:
          $ref: '#/components/schemas/View'
        model:
          type: object
          additionalProperties:
            type: object
        status:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        viewName:
          type: string
        modelMap:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: object
        reference:
          type: boolean
        empty:
          type: boolean
    View:
      type: object
      properties:
        contentType:
          type: string

